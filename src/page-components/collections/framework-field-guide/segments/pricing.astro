---
import PricingCard from "../components/pricing-card.astro";
import SmallFilledButton from "../components/small-filled-button.astro";
import SmallOutlinedButton from "../components/small-outlined-button.astro";
import styles from "./pricing.module.scss";
---

<section class={styles.pricingContainer}>
	<h2 class={`text-style-headline-2 ${styles.pricingTitle}`}>Pricing</h2>
	<h2 class={`text-style-body-large ${styles.pricingSubtitle}`}>
		Sign up today for 50% off of the final price.
	</h2>
	<h2 class={`text-style-body-medium ${styles.pricingSubsubtitle}`}>
		(That means itâ€™ll still be free, as it will always be.)
	</h2>
	<div class={styles.pricingCardContainer}>
		<PricingCard
			class={styles.fundamentalsPricingCard}
			isSale={true}
			isHighlighted={true}
			title={"Fundamentals"}
			description={`
Learn the core concepts behind your favorite frameworks and develop skillsets to build your first apps.    
    `.trim()}
			price={`Free`}
			enterpriseToggle={true}
			enterpriseExplainer={`Absolutely nothing changes. Still free.`}
			bulletPoints={[
				"Introduction to Components",
				"Lifecycle methods",
				"Forms",
				"Dependency injection",
				"Shared component logic",
				"Portals",
				"Accessibility",
				"Code structure",
			]}
			starPoints={[
				"18 jampacked chapters",
				"Lifetime access to content",
				"Discord community access",
				"Office hours and Q&A session",
				"Money-back guarantee",
				"Bonus: Offline download",
			]}
		>
			<SmallFilledButton slot="button" href="https://discord.gg/FMcvc6T"
				>Request access</SmallFilledButton
			>
		</PricingCard>
		<PricingCard
			class={styles.ecosystemPricingCard}
			isSale={false}
			false
			title={"Ecosystem"}
			description={`
Build out production-ready applications with all of the bells and whistles your users expect.
    `.trim()}
			price={`Gratis`}
			enterpriseToggle={false}
			enterpriseExplainer={`Shipping not included`}
			bulletPoints={[
				"Build tooling",
				"Developer tooling",
				"Component styling",
				"Page routing",
				"Testing methodologies",
				"Server-side rendering",
				"Static site generation",
				"Global data store",
			]}
			starPoints={[
				"12 comprehensive chapters",
				"Lifetime access to content",
				"Discord community access",
				"Office hours and Q&A session",
			]}
		>
			<SmallOutlinedButton
				slot="button"
				href="#signup-form"
				onclick="event.preventDefault();var title=document.getElementById('signup-form');title.scrollIntoView({behavior: 'smooth', block: 'start'})"
				>Sign up for updates</SmallOutlinedButton
			>
		</PricingCard>
		<PricingCard
			class={styles.internalsPricingCard}
			isSale={false}
			isHighlighted={false}
			title={"Internals"}
			description={`
Take a deeper dive into understanding how your apps work under-the-hood, including rewriting internals from scratch.
    `.trim()}
			price={`$0`}
			enterpriseToggle={false}
			enterpriseExplainer={`Tax not included`}
			bulletPoints={[
				"Performance optimizations",
				"Virtual DOM",
				"Incremental DOM",
				"Custom renderers",
				"Explicit reactivity",
				"Zone.js",
				"JavaScript proxies",
				"JSX internals",
			]}
			starPoints={[
				"12 comprehensive chapters",
				"Lifetime access to content",
				"Discord community access",
				"Office hours and Q&A session",
			]}
		>
			<SmallOutlinedButton
				slot="button"
				href="#signup-form"
				onclick="event.preventDefault();var title=document.getElementById('signup-form');title.scrollIntoView({behavior: 'smooth', block: 'start'})"
				>Sign up for updates</SmallOutlinedButton
			>
		</PricingCard>
	</div>
</section>

<script>
	const enterpriseExplainers = Array.from(
		document.querySelectorAll('[data-enterprise-explainer="true"]')
	) as HTMLElement[];
	const toggleEl = document.querySelector(
		"#enterprise-toggle"
	) as HTMLInputElement;
	toggleEl.addEventListener("click", () => {
		enterpriseExplainers.forEach((explainer) => {
			if (toggleEl.checked) {
				explainer.style.opacity = "1";
			} else {
				explainer.style.opacity = "0";
			}
		});
	});
</script>
