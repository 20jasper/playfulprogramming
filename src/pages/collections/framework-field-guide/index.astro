---
import Document from "../../../layouts/document.astro";
import "../../../page-components/collections/framework-field-guide/fonts/fira-code.css";
import "../../../page-components/collections/framework-field-guide/fonts/plus-jakarta-sans.css";
import "../../../page-components/collections/framework-field-guide/fonts/changa-one.css";
import "../../../page-components/collections/framework-field-guide/tokens/adventure.scss";
import "../../../page-components/collections/framework-field-guide/tokens/buttons.scss";
import "../../../page-components/collections/framework-field-guide/tokens/code-block.scss";
import "../../../page-components/collections/framework-field-guide/tokens/colors.scss";
import "../../../page-components/collections/framework-field-guide/tokens/book-sections.scss";
import "../../../page-components/collections/framework-field-guide/tokens/dimensions.scss";
import "../../../page-components/collections/framework-field-guide/tokens/text-styles.scss";
import "../../../page-components/collections/framework-field-guide/tokens/themes.scss";
import "../../../page-components/collections/framework-field-guide/tokens/pricing.scss";
import SEO from "src/components/seo/seo.astro";
import Hero from "src/page-components/collections/framework-field-guide/segments/hero.astro";
import Fundamentals from "src/page-components/collections/framework-field-guide/segments/fundamentals.astro";
import Ecosystem from "src/page-components/collections/framework-field-guide/segments/ecosystem.astro";
import Internals from "src/page-components/collections/framework-field-guide/segments/internals.astro";
import AdventureContinues from "src/page-components/collections/framework-field-guide/segments/adventure-continues.astro";
import YourGuide from "src/page-components/collections/framework-field-guide/segments/your-guide.astro";
import CodeBlock from "src/page-components/collections/framework-field-guide/segments/code-block.astro";
import TheRestContainer from "src/page-components/collections/framework-field-guide/segments/the-rest-container.astro";
import Pricing from "src/page-components/collections/framework-field-guide/segments/pricing.astro";
import { unicorns } from "utils/data";
---

<Document>
	<SEO
		slot="head"
		title={"The Framework Field Guide"}
		description={"A practical and free way to teach Angular, React, and Vue all at once, so you can choose the right tool for the job and learn the underlying concepts in depth."}
		unicornsData={[unicorns.find((uni) => uni.id === "crutchcorn")]}
		publishedTime={"2022-12-01T13:45:00.284Z"}
		type={"book"}
		shareImage={"/custom-content/collections/framework-field-guide/framework_field_guide_social.png"}
	/>
	<div slot="post-body">
		<Hero />
		<Fundamentals />
		<Ecosystem />
		<Internals />
		<TheRestContainer>
			<YourGuide />
			<CodeBlock />
			<AdventureContinues />
			<Pricing />
		</TheRestContainer>
	</div>
</Document>
<script>
	import { enableTabs } from "../../../utils/markdown/scripts/tabs";
	enableTabs();
</script>
<script>
	// Thanks https://easings.net/
	function easeOutExpo(x: number): number {
		return x === 1 ? 1 : 1 - Math.pow(2, -10 * x);
	}

	window.onload = () => {
		const els = Array.from(
			document.querySelectorAll("[data-move-on-scroll-by]")
		) as HTMLElement[];
		const mediaQuery = window.matchMedia("(prefers-reduced-motion: reduce)");

		const getElTops = () =>
			els.map((el) => {
				el.style.transform = "";
				var { top: topRect, height } = el.getBoundingClientRect();

				let top =
					topRect +
					document.documentElement.scrollTop -
					(document.documentElement.clientTop || 0);

				// Keep this value around for the same 'innerHeight' calculation for later
				const trueTop = top;

				// If the item is below the upper fold, let's go ahead and start listening at 50% of the screen height, when the element is visible
				if (top >= window.innerHeight) {
					// Start animating once the element is midway down the screen
					top = top - (window.innerHeight - height) / 2;
				}

				return { top, trueTop };
			});

		let initialElTops = getElTops();

		window.addEventListener("resize", () => {
			initialElTops = getElTops();
			moveItems();
		});

		function moveItems() {
			els.forEach((el, i) => {
				const { top, trueTop } = initialElTops[i];

				// If the element is above the fold, start running immediately
				const disableTop = trueTop < window.innerHeight;

				const topCalc = disableTop ? 0 : top;

				let px =
					(document.documentElement.scrollTop - topCalc) *
					Number(el.dataset.moveOnScrollBy);

				// Only allow the animation to go up by 10% of the height of the element at most
				const maximumNegativeAllowed =
					0 -
					el.parentElement.clientHeight *
						0.4 *
						Number(el.dataset.moveOnScrollBy);

				if (top >= window.innerHeight) {
					if (px > maximumNegativeAllowed && px < -1) {
						const positivePx = 0 - px;
						const positiveMaxAllowed = 0 - maximumNegativeAllowed;

						const multiplier = easeOutExpo(positivePx / positiveMaxAllowed);
						px = px * multiplier;
					}

					if (px < maximumNegativeAllowed) {
						px = maximumNegativeAllowed;
					}
				}

				el.style.transform = `translate3d(0px, ${px}px, 0px)`;
			});
		}
		if (!mediaQuery.matches) {
			window.addEventListener("scroll", moveItems);
			window.addEventListener("touchmove", moveItems);
		}
		mediaQuery.addEventListener("change", () => {
			if (mediaQuery.matches) {
				els.forEach((el: HTMLElement) => (el.style.transform = ""));
				window.removeEventListener("scroll", moveItems);
				window.removeEventListener("touchmove", moveItems);
			} else {
				window.addEventListener("scroll", moveItems);
				window.addEventListener("touchmove", moveItems);
			}
		});
	};
</script>
<style is:global>
	*:focus-visible {
		outline: none;
	}

	*:focus-visible::after {
		content: " ";
		position: absolute;
		box-sizing: content-box;
		height: 100%;
		width: 100%;
		padding: var(--focus-border_gap);
		top: 50%;
		left: 50%;
		transform: translateX(-50%) translateY(-50%);
		border-width: inherit;
		border-style: solid;
		border-color: transparent;
		border-radius: inherit;
		outline: var(--focus-border_width) solid var(--outline_focused);
		z-index: 9;
	}
</style>
