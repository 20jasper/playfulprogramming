---
const { headingsToDisplaySlugs } = Astro.props as {
	headingsToDisplaySlugs: Array<string>;
};
---

<script define:vars={{ headingsToDisplaySlugs }}>
	window.headingsToDisplaySlugs = headingsToDisplaySlugs;
</script>

<script>
	type LinkRef = {
		li: HTMLLIElement;
		anchor: HTMLAnchorElement;
		id: string;
	};

	window.onload = () => {
		const prefersReducedMotion = window.matchMedia
			? window.matchMedia("(prefers-reduced-motion: reduce)").matches
			: false;

		const tocListRef: HTMLOListElement = document.querySelector("#tocList");
		const tocListContainer =
			tocListRef.parentElement?.parentElement?.parentElement;

		const linkRefs: LinkRef[] = [
			...(document.querySelectorAll(
				'[data-headingitem="true"]'
			) as never as HTMLLIElement[]),
		].map((li) => ({
			li,
			anchor: li.firstElementChild as HTMLAnchorElement,
			id: li.firstElementChild.getAttribute("href").slice(1),
		}));

		// smooth-scroll to a heading when clicked
		function handleAnchorClick(e: Event) {
			e.preventDefault();
			const anchor = e.target as HTMLAnchorElement;
			document
				.getElementById(anchor.getAttribute("href").slice(1))
				?.scrollIntoView({
					behavior: prefersReducedMotion ? "auto" : "smooth",
				});
			return false;
		}

		for (const { anchor } of linkRefs) {
			anchor.addEventListener("click", handleAnchorClick);
		}

		let activeLinkId: string = linkRefs[0]?.id || "";

		const handleObserver = (entries) => {
			// find the first link that matches a visible heading
			for (const linkRef of linkRefs) {
				// find any heading entry that corresponds to the linkRef
				const entry = entries.find(
					(entry) => entry.target.getAttribute("id") === linkRef.id
				);

				// determine if the link should be active
				if (entry && entry.isIntersecting && entry.intersectionRatio >= 1) {
					linkRef.li.classList.add("toc-is-active");
					activeLinkId = linkRef.id;

					// if the selected link is beyond the visible area of the container...
					if (
						// the user hasn't requested reduced motion...
						!prefersReducedMotion &&
						tocListContainer &&
						// the link is below the lowest point of the container...
						(tocListContainer.scrollTop + tocListContainer.offsetHeight <
							linkRef.li.offsetTop + linkRef.li.offsetHeight ||
							// the link is above the highest point of the container...
							tocListContainer.scrollTop > linkRef.li.offsetTop)
					) {
						// ...then scroll to center the link in the container
						tocListContainer.scrollTo({
							top: Math.max(
								0,
								linkRef.li.offsetTop +
									linkRef.li.offsetHeight -
									tocListContainer.offsetHeight / 2
							),
							behavior: "smooth",
						});
					}
					break;
				}
			}

			// remove visible class from any links that are *not* the most recently selected heading
			for (const linkRef of linkRefs) {
				if (linkRef.id != activeLinkId)
					linkRef.li.classList.remove("toc-is-active");
			}
		};

		const observer = new IntersectionObserver(handleObserver, {
			rootMargin: "0px",
			threshold: 1,
		});

		// use headingsToDisplaySlugs prop to observe all heading elements on the page
		const headingsEls: HTMLElement[] = (
			window as any
		).headingsToDisplaySlugs.map((headingToDisplay: string) => {
			return document.getElementById(headingToDisplay);
		});

		headingsEls
			.filter((a) => a)
			.forEach((heading) => {
				observer.observe(heading);
			});
	};
</script>
