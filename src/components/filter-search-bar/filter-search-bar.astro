---
import styles from "./filter-search-bar.module.scss";
import SearchField from "./search-field/search-field.astro";
// import FilterListbox from "./filter-listbox/filter-listbox.astro";

export interface FilterSearchBarProps {
	unicornProfilePicMap: astroHTML.JSX.ImgHTMLAttributes[];
}

const { unicornProfilePicMap } = Astro.props as FilterSearchBarProps;
---

<div class={styles.iconContainer}>
	<SearchField class={styles.searchField} />
	<div class={styles.midContainer}>
		<slot />
	</div>
	<!-- <FilterListbox class={styles.filterField} /> -->
</div>
<script define:vars={{ unicornProfilePicMap }}>
	window.unicornProfilePicMap =
		window.unicornProfilePicMap || unicornProfilePicMap;
</script>
<script>
	import { render, createElement, Fragment } from "preact";
	import { PostInfo } from "types/PostInfo";
	import { PostCard } from "../../components/post-card/post-card";

	const searchInput: HTMLElement = document.querySelector("#search-input");
	const postListContainer: HTMLElement = document.querySelector(
		"#post-list-container"
	);
	const searchPostListContainer: HTMLElement = document.querySelector(
		"#search-post-list-container"
	);

	const searchPostList = document.querySelector(
		"#search-post-list-container > ul"
	);

	const initDisplayVal = postListContainer.style.display;

	let loadingEl: HTMLElement | undefined;
	let abortController: AbortController | undefined;

	searchInput.addEventListener(
		"input",
		(e: InputEvent & { target: HTMLInputElement }) => {
			const val = e.target.value;
			const children: HTMLElement[] = searchPostList.children as never;
			for (let child of [...children]) {
				child.remove();
			}
			if (!val) {
				postListContainer.style.display = initDisplayVal;
				searchPostListContainer.style.display = "none";
				return;
			}

			postListContainer.style.display = "none";
			searchPostListContainer.style.display = "block";

			const unicornProfilePicMap = (window as any).unicornProfilePicMap || [];
			loadingEl && loadingEl.remove();
			loadingEl = document.createElement("p");
			loadingEl.innerText = "Loading...";
			searchPostListContainer.append(loadingEl);

			if (abortController) {
				abortController.abort();
				abortController = undefined;
			}
			abortController = new AbortController();
			fetch(`/api/search?query=${val}`, { signal: abortController.signal })
				.then((res) => res.json())
				.then((serverVal: PostInfo[]) => {
					// TODO: Debounce to avoid server kill
					const FilledPostCard = createElement(
						Fragment,
						{},
						serverVal.map((post) =>
							createElement(PostCard, {
								unicornProfilePicMap,
								post,
							})
						)
					);
					render(FilledPostCard, searchPostList);
					loadingEl && loadingEl.remove();
					loadingEl = undefined;
					abortController = undefined;
				});
		}
	);
</script>
