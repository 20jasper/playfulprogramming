---
import { ProfilePictureMap } from "utils/get-unicorn-profile-pic-map";
import styles from "./filter-search-bar.module.scss";
import SearchField from "./search-field/search-field.astro";
// import FilterListbox from "./filter-listbox/filter-listbox.astro";
---

<div class={styles.iconContainer}>
	<SearchField class={styles.searchField} />
	<div class={styles.midContainer}>
		<slot />
	</div>
	<!-- <FilterListbox class={styles.filterField} /> -->
</div>
<script>
	const SEARCH_QUERY_KEY = "searchQuery";

	import { render, createElement, Fragment } from "preact";
	import { useState } from "preact/hooks";
	import { PostInfo } from "types/PostInfo";
	import { debounce } from "utils/debounce";
	import { ProfilePictureMap } from "utils/get-unicorn-profile-pic-map";
	import {
		SearchBarHandler,
		getPageFromQueryParams,
		SEARCH_PAGE_KEY,
	} from "./search-bar-handler";

	const searchInput: HTMLInputElement = document.querySelector("#search-input");
	const postListContainer: HTMLElement = document.querySelector(
		"#post-list-container"
	);
	const searchPostListContainer: HTMLElement = document.querySelector(
		"#search-post-list-container"
	);

	const searchPostList = document.querySelector(
		"#search-post-list-container > div"
	);

	const initDisplayVal = postListContainer.style.display;

	let loadingEl: HTMLElement | undefined;
	let abortController: AbortController | undefined;

	function doSearch(val, resetPage = true) {
		const children: HTMLElement[] = searchPostList.children as never;
		for (let child of [...children]) {
			child.remove();
		}
		if (!val) {
			postListContainer.style.display = initDisplayVal;
			searchPostListContainer.style.display = "none";
			return;
		}

		postListContainer.style.display = "none";
		searchPostListContainer.style.display = "block";

		loadingEl && loadingEl.remove();
		loadingEl = document.createElement("p");
		loadingEl.innerText = "Loading...";
		searchPostListContainer.append(loadingEl);

		const url = new URL(window.location as never);
		if (resetPage) {
			url.searchParams.set(SEARCH_PAGE_KEY, "0");
		}
		url.searchParams.set(SEARCH_QUERY_KEY, val);
		window.history.pushState({}, "", url);
		if (abortController) {
			abortController.abort();
			abortController = undefined;
		}
		abortController = new AbortController();
		// eslint-disable-next-line no-undef
		plausible("search", { props: { searchVal: val } });
		fetch(`/api/search?query=${val}`, { signal: abortController.signal })
			.then((res) => res.json())
			.then(
				(serverVal: {
					posts: PostInfo[];
					totalPosts: number;
					unicornProfilePicMap: ProfilePictureMap;
				}) => {
					const SearchCardHandler = createElement(SearchBarHandler, {
						unicornProfilePicMap: serverVal.unicornProfilePicMap,
						posts: serverVal.posts,
						totalPosts: serverVal.totalPosts,
					});
					render(SearchCardHandler, searchPostList);
					loadingEl && loadingEl.remove();
					loadingEl = undefined;
					abortController = undefined;
				}
			);
	}

	const debounceDoSearch = debounce(doSearch, 1000, false);

	searchInput.addEventListener(
		"input",
		(e: InputEvent & { target: HTMLInputElement }) => {
			const val = e.target.value;
			debounceDoSearch(val);
		}
	);

	/* See if there was an existing search before. If there was, open it! */
	const searchParams = new URLSearchParams(location.search);

	const searchQuery = searchParams.get(SEARCH_QUERY_KEY);
	if (searchQuery) {
		searchInput.value = searchQuery;
		doSearch(searchQuery, false);
	}
</script>
