---
import { ProfilePictureMap } from "utils/get-unicorn-profile-pic-map";
import styles from "./filter-search-bar.module.scss";
import SearchField from "./search-field/search-field.astro";
// import FilterListbox from "./filter-listbox/filter-listbox.astro";
---

<div class={styles.iconContainer}>
	<SearchField class={styles.searchField} />
	<div class={styles.midContainer}>
		<slot />
	</div>
	<!-- <FilterListbox class={styles.filterField} /> -->
</div>
<script>
	import { render, createElement, Fragment } from "preact";
	import { PostInfo } from "types/PostInfo";
	import { debounce } from "utils/debounce";
	import { ProfilePictureMap } from "utils/get-unicorn-profile-pic-map";
	import { PostCard } from "../../components/post-card/post-card";
	import { Pagination } from "../../components/pagination/pagination";

	const searchInput: HTMLElement = document.querySelector("#search-input");
	const postListContainer: HTMLElement = document.querySelector(
		"#post-list-container"
	);
	const searchPostListContainer: HTMLElement = document.querySelector(
		"#search-post-list-container"
	);

	const searchPostList = document.querySelector(
		"#search-post-list-container > ul"
	);

	const initDisplayVal = postListContainer.style.display;

	let loadingEl: HTMLElement | undefined;
	let abortController: AbortController | undefined;

	function doSearch(val) {
		if (abortController) {
			abortController.abort();
			abortController = undefined;
		}
		abortController = new AbortController();
		// eslint-disable-next-line no-undef
		plausible("search", { props: { searchVal: val } });
		fetch(`/api/search?query=${val}`, { signal: abortController.signal })
			.then((res) => res.json())
			.then(
				(serverVal: {
					posts: PostInfo[];
					totalPosts: number;
					unicornProfilePicMap: ProfilePictureMap;
				}) => {
					const children = serverVal.posts.map((post) =>
						createElement(PostCard, {
							unicornProfilePicMap: serverVal.unicornProfilePicMap,
							post,
						})
					);

					children.push(
						createElement(Pagination, {
							rootURL: "",
							class: "",
							getPageHref: (pageNum: number) =>
								`${window.location.pathname}?searchPage=${pageNum}`,
							page: {
								total: serverVal.totalPosts,
								currentPage: 0,
								size: 8,
							},
						})
					);

					const FilledPostCard = createElement(Fragment, {}, children);
					render(FilledPostCard, searchPostList);
					loadingEl && loadingEl.remove();
					loadingEl = undefined;
					abortController = undefined;
				}
			);
	}

	const debounceDoSearch = debounce(doSearch, 1000, false);

	searchInput.addEventListener(
		"input",
		(e: InputEvent & { target: HTMLInputElement }) => {
			const val = e.target.value;
			const children: HTMLElement[] = searchPostList.children as never;
			for (let child of [...children]) {
				child.remove();
			}
			if (!val) {
				postListContainer.style.display = initDisplayVal;
				searchPostListContainer.style.display = "none";
				return;
			}

			postListContainer.style.display = "none";
			searchPostListContainer.style.display = "block";

			loadingEl && loadingEl.remove();
			loadingEl = document.createElement("p");
			loadingEl.innerText = "Loading...";
			searchPostListContainer.append(loadingEl);
			debounceDoSearch(val);
		}
	);
</script>
