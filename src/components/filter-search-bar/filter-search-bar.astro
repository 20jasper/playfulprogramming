---
import styles from "./filter-search-bar.module.scss";
import SearchField from "./search-field/search-field.astro";
---

<div class={styles.iconContainer}>
	<SearchField class={styles.searchField} />
	<div class={styles.midContainer}>
		<slot />
	</div>
	<div></div>
</div>
<script>
	const SEARCH_QUERY_KEY = "searchQuery";

	import { render, createElement } from "preact";
	import { PostInfo } from "types/index";
	import { debounce } from "utils/debounce";
	import { ProfilePictureMap } from "utils/get-unicorn-profile-pic-map";
	import { SearchBarHandler, SEARCH_PAGE_KEY } from "./search-bar-handler";

	const searchInput: HTMLInputElement = document.querySelector("#search-input");
	const postListContainer: HTMLElement = document.querySelector(
		"#post-list-container"
	);
	// May be `null` if on author page with no multiple pages
	const postListPagination: HTMLElement | null = document.querySelector(
		"#post-list-pagination"
	);
	const searchPostListContainer: HTMLElement = document.querySelector(
		"#search-post-list-container"
	);

	const searchPostList = document.querySelector(
		"#search-post-list-container > div"
	);

	const initPostContainerDisplayVal = postListContainer.style.display;
	const initPostPaginationDisplayVal = postListPagination?.style.display;

	let loadingEl: HTMLElement | undefined;
	let abortController: AbortController | undefined;

	function doSearch(val: any, resetPage = true) {
		const children: HTMLElement[] = searchPostList.children as never;
		for (let child of [...children]) {
			child.remove();
		}

		const url = new URL(window.location as never);

		if (!val) {
			url.searchParams.delete(SEARCH_PAGE_KEY);
			url.searchParams.delete(SEARCH_QUERY_KEY);
			postListContainer.style.display = initPostContainerDisplayVal;
			if (postListPagination)
				postListPagination.style.display = initPostPaginationDisplayVal;
			searchPostListContainer.style.display = "none";
			window.history.pushState({}, "", url);
			return;
		}

		postListContainer.style.display = "none";
		if (postListPagination) postListPagination.style.display = "none";
		searchPostListContainer.style.display = "block";

		loadingEl && loadingEl.remove();
		loadingEl = document.createElement("p");
		loadingEl.innerText = "Loading...";
		searchPostListContainer.append(loadingEl);

		if (resetPage) {
			url.searchParams.set(SEARCH_PAGE_KEY, "1");
		}
		url.searchParams.set(SEARCH_QUERY_KEY, val);
		window.history.pushState({}, "", url);
		if (abortController) {
			abortController.abort();
			abortController = undefined;
		}
		abortController = new AbortController();
		// eslint-disable-next-line no-undef
		plausible("search", { props: { searchVal: val } });
		const authorId: string | undefined = (window as any).authorId;
		fetch(
			`/api/search?query=${val}${authorId ? "&authorId=" + authorId : ""}`,
			{ signal: abortController.signal }
		)
			.then((res) => res.json())
			.then(async (serverVal: { posts: PostInfo[]; totalPosts: number }) => {
				const unicornProfilePicMap: ProfilePictureMap = await fetch(
					"/unicorns/unicornProfilePicMap.json",
					{ cache: "force-cache" }
				).then((res) => res.json());
				const SearchCardHandler = createElement(SearchBarHandler, {
					unicornProfilePicMap,
					posts: serverVal.posts,
					totalPosts: serverVal.totalPosts,
				});
				render(SearchCardHandler, searchPostList);
				loadingEl && loadingEl.remove();
				loadingEl = undefined;
				abortController = undefined;
			});
	}

	const debounceDoSearch = debounce(doSearch, 1000, false);

	searchInput.addEventListener(
		"input",
		(e: InputEvent & { target: HTMLInputElement }) => {
			const val = e.target.value;
			debounceDoSearch(val);
		}
	);

	/* See if there was an existing search before. If there was, open it! */
	const searchParams = new URLSearchParams(location.search);

	const searchQuery = searchParams.get(SEARCH_QUERY_KEY);
	if (searchQuery) {
		searchInput.value = searchQuery;
		doSearch(searchQuery, false);
	}
</script>
