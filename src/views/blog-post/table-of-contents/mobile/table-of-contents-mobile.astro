---
import styles from "./table-of-contents-mobile.module.scss";
import classnames from "classnames";
import { PostHeadingInfo } from "types/index";
import HeadingIntersectionObserverScript from "../heading-intersection-observer-script.astro";
import { IconOnlyButton } from "components/button/button";
import { Icon } from "astro-icon/components";

interface TableOfContentsProps {
	headingsWithId: PostHeadingInfo[];
}

const { headingsWithId } = Astro.props as TableOfContentsProps;

const headings = headingsWithId?.length ? headingsWithId : [];

// get the "minimum" depth of heading used in the post (e.g. if the post only uses h2 and h3 -> minDepth=1)
const minDepth = Math.min(...headings.map((h) => h.depth));

// offset the heading depths by minDepth, so they always start at 1
const headingsToDisplay = headings
	.map((h) => Object.assign({}, h, { depth: h.depth - minDepth + 1 }))
	.filter((headingInfo) => headingInfo.depth <= 2);

const headingsToDisplaySlugs = headingsToDisplay.map((item) => item.slug);

const tocMobileMenuCollapsed = styles.tocMobileMenuCollapsed;
const tocMobileOpenMainBody = styles.tocMobileOpenMainBody;
---

<aside
	id="mobile-table-of-contents"
	class={`${styles.mobileTocContainer} ${styles.tocMobileMenuCollapsed}`}
	aria-labelledby="table-of-contents-heading"
>
	<div class={styles.tocTitle}>
		<h2 id="table-of-contents-heading" class={`text-style-headline-5 `}>
			Table of Contents
		</h2>
		<IconOnlyButton id="toggleMenuExpanded" tag="button">
			<Icon class={styles.mobileTocOpenIcon} name="chevron_down" />
			<Icon class={styles.mobileTocCloseIcon} name="close" />
		</IconOnlyButton>
	</div>
	<script define:vars={{ tocMobileOpenMainBody, tocMobileMenuCollapsed }}>
		const toggleMenuExpanded = () => {
			const mobileToc = document.getElementById("mobile-table-of-contents");
			mobileToc.classList.toggle(tocMobileMenuCollapsed);

			const mainBody = document.getElementsByTagName("body")[0];
			mainBody.classList.toggle(tocMobileOpenMainBody);

			const mobileMenuCollapsed = mobileToc.classList.contains(
				tocMobileMenuCollapsed,
			);

			const mainPageContents = document.getElementById("main-page-contents");
			mainPageContents.inert = !mobileMenuCollapsed;

			const mobileTocList = document.getElementById("mobileTocList");
			mobileTocList.inert = mobileMenuCollapsed;
		};

		document
			.getElementById("toggleMenuExpanded")
			.addEventListener("click", function () {
				toggleMenuExpanded();
			});
	</script>
	<ol
		class={`${styles.tableList} ${styles.tocListHidden}`}
		role="list"
		id="mobileTocList"
		inert
	>
		{
			headingsToDisplay.map((headingInfo, i) => {
				const liClassNames = classnames(styles.tableListItem, {
					[styles.depth1]: headingInfo.depth === 1,
					[styles.depth2]: headingInfo.depth === 2,
					["toc-is-active"]: i === 0,
				});
				return (
					<li class={liClassNames} data-headingitem="true">
						<a
							class={`text-style-button-regular`}
							href={`#${headingInfo.slug}`}
						>
							<span class={styles.tableListItemLinkInner}>
								{headingInfo.value}
							</span>
						</a>
					</li>
				);
			})
		}
	</ol>
</aside>
<HeadingIntersectionObserverScript
	headingsToDisplaySlugs={headingsToDisplaySlugs}
/>
