---
import PostTitleHeader from "./post-title-header/post-title-header.astro";
import TableOfContents from "./table-of-contents/table-of-contents.astro";
import MailingListFull from "components/mailing-list/mailing-list-full.astro";
import Disqus from "components/disqus/disqus.astro";
import TranslationsHeader from "../base/translations/translations-header.astro";
import SidebarLayout from "src/components/sidebar-layout/sidebar-layout.astro";
import { Icon } from "astro-icon";

import type { MarkdownInstance } from "astro";
import { PostInfo } from "types/PostInfo";

import { siteMetadata } from "constants/site-config";
import "../../styles/shiki.scss";
import "../../styles/tabs.scss";
import "../../styles/convertkit.scss";
import "../../styles/iframe-replacement.scss";
import SeriesToC from "./series/series-toc.astro";
import SeriesNav from "./series/series-nav.astro";
import { getPrefixLanguageFromPath } from "utils/translations";
import { PostCardSmall } from "components/post-card/post-card-small";

const { Content, post, posts } = Astro.props as {
	post: PostInfo;
	Content: MarkdownInstance<any>["Content"];
	posts: MarkdownInstance<PostInfo>[];
};

const locale = getPrefixLanguageFromPath(Astro.url.pathname);

const GHLink = `https://github.com/${siteMetadata.repoPath}/tree/master${siteMetadata.relativeToPosts}/${post.slug}/index.md`;

let seriesPosts: PostInfo[] = [];
if (post.series && post.order) {
	seriesPosts = posts
		.filter(
			(filterPost) =>
				filterPost.frontmatter.locale === locale &&
				filterPost.frontmatter.series === post.series
		)
		.sort(
			(postA, postB) =>
				Number(postA.frontmatter.order) - Number(postB.frontmatter.order)
		)
		.map((post) => post.frontmatter);
}
---

<script>
	import mediumZoom from "medium-zoom";

	mediumZoom(".post-body img:not([data-nozoom])");
</script>
<script>
	import { enableTabs } from "../../utils/markdown/scripts/tabs";
	enableTabs();
</script>
<script>
	import { iFrameClickToRun } from "../../utils/markdown/scripts/iframe-click-to-run";
	iFrameClickToRun();
</script>
<article>
	<SidebarLayout>
		<div slot="sidebar">
			<h1 class="text-style-headline-5">Table of Contents</h1>
			<TableOfContents headingsWithId={post.headingsWithId} />
			<h1 class="text-style-headline-5">Related posts</h1>
			<ul class="unlist-column">
				{
					post.suggestedArticles.map((suggestedPost) => (
						<PostCardSmall post={suggestedPost} />
					))
				}
			</ul>
		</div>
		<header role="banner" class="marginZeroAutoChild">
			<PostTitleHeader post={post} />
		</header>
		<main class="post-body" data-testid={"post-body-div"}>
			{
				post.series ? (
					<SeriesToC
						post={post}
						postSeries={seriesPosts}
						collectionSlug={post.collectionSlug}
					/>
				) : null
			}
			{
				post.translations && Object.keys(post.translations).length ? (
					<TranslationsHeader locales={Object.keys(post.translations)} />
				) : null
			}
			<Content />
			{post.series ? <SeriesNav post={post} postSeries={seriesPosts} /> : null}
		</main>
	</SidebarLayout>
	<footer role="contentinfo" class="post-lower-area">
		{
			post.licenseMeta ? (
				<div>
					<a
						aria-label={`Post licensed with ${post.licenseMeta.displayName}`}
						href={post.licenseMeta.explainLink}
						style={{ display: "table", margin: "0 auto" }}
					>
						<img
							src={post.licenseMeta.footerImg}
							alt={post.licenseMeta.licenceType}
						/>
					</a>
				</div>
			) : null
		}
		<MailingListFull />
		<div class="postBottom">
			<div class="btnLike prependIcon">
				<Icon height="36" width="36" name="message" />
				<p>Comments</p>
			</div>
			<a
				class="baseBtn prependIcon"
				href={GHLink}
				target="_blank"
				rel="nofollow noopener noreferrer"
			>
				<Icon height="36" width="36" name="github" class="strokeicon" />
				View this Post on GitHub
			</a>
		</div>
		<Disqus slug={post.slug} title={post.title} />
	</footer>
</article>
