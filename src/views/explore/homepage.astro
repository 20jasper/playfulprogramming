---
import { PostCardGrid } from "src/components/post-card/post-card-grid";
import { Button } from "components/button/button";
import { PostInfo } from "../../types";
import { getUnicornProfilePicMap } from "utils/get-unicorn-profile-pic-map";
import { translate } from "utils/translations";
import { ExtendedCollectionInfo } from "types/CollectionInfo";
import { CollectionCard } from "components/collection-card/collection-card";
import { SubHeader } from "../../components/subheader/subheader";
import Hero from "../../components/hero/hero.astro";
import SearchSection from "../../components/search-section/search-section.astro";
import styles from "./homepage.module.scss";
import { buildSearchQuery } from "../../utils/search";
import { getPicture } from "@astrojs/image";

export interface HomepageProps {
	posts: PostInfo[];
	collections: ExtendedCollectionInfo[];
}

const { posts, collections } = Astro.props as HomepageProps;

const unicornProfilePicMap = await getUnicornProfilePicMap();

const collectionsWithPictures = await Promise.all(
	collections.map(async (collection) => {
		const coverImgAspectRatio =
			collection.coverImgMeta.width / collection.coverImgMeta.height;
		// adjust the image width to ensure its height=240px
		// (i.e. it shouldn't get upscaled/downscaled with `object-fit: cover`)
		const coverImgWidth = Math.max(160, Math.ceil(240 * coverImgAspectRatio));

		const coverPicture = await getPicture({
			src: collection.coverImgMeta.relativeServerPath,
			alt: "",
			widths: [coverImgWidth],
			aspectRatio: coverImgAspectRatio,
			formats: ["avif", "webp", "png"],
		});

		return { ...collection, coverPicture };
	}),
);
---

<Hero />
<section>
	<SubHeader tag="h1" text="Recent articles" id="posts-header">
		<Button href="/page/1">{translate(Astro, "action.view_all")}</Button>
	</SubHeader>

	<PostCardGrid
		aria-labelledby="posts-header"
		postsToDisplay={posts}
		unicornProfilePicMap={unicornProfilePicMap}
	/>
</section>

<section>
	<SubHeader tag="h1" text="Collections" id="collections-header">
		<Button
			href={`/search?${buildSearchQuery({ contentToDisplay: "collections" })}`}
		>
			{translate(Astro, "action.view_all")}
		</Button>
	</SubHeader>

	<ul
		role="list"
		aria-labelledby="collections-header"
		class={styles.collectionsGrid}
	>
		{
			collectionsWithPictures.map((collection) => (
				<li>
					<CollectionCard
						collection={collection}
						unicornProfilePicMap={unicornProfilePicMap}
					/>
				</li>
			))
		}
	</ul>
</section>

<SearchSection />
