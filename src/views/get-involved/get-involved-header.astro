---
import { getUnicornsByLang } from "../../utils/api";
import { getInitialItems } from "./get-involved-header";

const NUMBER_OF_INNER_ITEMS = 22;
const NUMBER_OF_OUTER_ITEMS = 28;
const INNER_OFFSET = 150;
const OUTER_OFFSET = 300;

const initialInnerItems = getInitialItems(NUMBER_OF_INNER_ITEMS, INNER_OFFSET);
const initialOuterItems = getInitialItems(NUMBER_OF_OUTER_ITEMS, OUTER_OFFSET);

const unicorns = getUnicornsByLang("en");
const reverseUnicorns = unicorns.slice().reverse();

const getSafeIndex = <T,>(array: T[], index: number) => {
	return array[index % array.length];
};
---

<div class="header-container">
	<div class="get-involved-container">
		<div class="get-involved-contents">
			<h1>Get involved</h1>
			<hr />
			<div class="paragraph-container">
				<p class="text-style-body-large">
					Playful Programming embraces the best part of Open Source: Weâ€™re ran
					by real people wanting to make an impact in the world and help others
					learn and join us along the journey.
				</p>
			</div>
		</div>
		<div class="inner-involved-container" id="inner-circle-container">
			{
				initialInnerItems.map((item, index) => {
					const unicorn = getSafeIndex(unicorns, index);
					return (
						<div
							data-is-circle-inner-item
							id={`circle-item-inner-${index}`}
							class="circle-item"
							style={{
								left: item.x,
								top: item.y,
								backgroundImage: `url(${encodeURI(unicorn.profileImgMeta.relativeServerPath)})`,
								transform: `scale(${item.scale}) translate(-50%, -50%)`,
							}}
						>
							{unicorn.roles[0] && (
								<img
									class="sticker-role"
									src={`/stickers/role_${unicorn.roles[0]}.svg`}
									alt=""
								/>
							)}
						</div>
					);
				})
			}
		</div>
		<div class="outer-involved-container" id="outer-circle-container">
			{
				initialOuterItems.map((item, index) => {
					const unicorn = getSafeIndex(reverseUnicorns, index);
					return (
						<div
							data-is-circle-outer-item
							id={`circle-item-outer-${index}`}
							class="circle-item"
							style={{
								left: item.x,
								top: item.y,
								backgroundImage: `url(${encodeURI(unicorn.profileImgMeta.relativeServerPath)})`,
								transform: `scale(${item.scale}) translate(-50%, -50%)`,
							}}
						>
							{unicorn.roles[0] && (
								<img
									class="sticker-role"
									src={`/stickers/role_${unicorn.roles[0]}.svg`}
									alt=""
								/>
							)}
						</div>
					);
				})
			}
		</div>
	</div>
</div>

<script>
	// In a 30fps requestAnimationFrame loop, take each item and change the X, Y, and scale to rotate the items in the circle clockwise
	import { getInitialItems, calculatePosition } from "./get-involved-header";

	const DECELERATION_RATE = 0.99;
	const MIN_SPEED_THRESHOLD = 0.0001;
	const INNER_CIRCLE_ROTATION_SPEED = 0.001;
	const OUTER_CIRCLE_ROTATION_SPEED = 0.0005;
	const SPEED_CALCULATION_FACTOR = 0.01;
	const OUTER_SPEED_MULTIPLIER = 0.5;
	const INNER_OFFSET = 150;
	const OUTER_OFFSET = 300;

	const innerCircle = document.querySelectorAll("[data-is-circle-inner-item]");
	const outerCircle = document.querySelectorAll("[data-is-circle-outer-item]");
	const innerContainer = document.querySelector("#inner-circle-container")!;
	const outerContainer = document.querySelector("#outer-circle-container")!;

	let innerAngle = 0;
	let outerAngle = 0;
	let shouldUpdate = true;
	let prevX = 0;
	let speed = 0;
	let decelerating = false;

	function calculateSpeed(e: MouseEvent | TouchEvent) {
		const isMouseEvent = (e: any): e is MouseEvent => {
			return "clientX" in e;
		};
		const currentX = isMouseEvent(e) ? e.clientX : e.touches[0].clientX;
		if (prevX === 0) prevX = currentX;
		const diff = currentX - prevX;
		speed = diff * SPEED_CALCULATION_FACTOR;
		prevX = currentX;
	}

	function onMouseMove(e: MouseEvent) {
		calculateSpeed(e);
		innerAngle -= speed;
		outerAngle -= speed * OUTER_SPEED_MULTIPLIER;
		redraw();
	}

	function onTouchMove(e: TouchEvent) {
		calculateSpeed(e);
		innerAngle -= speed;
		outerAngle -= speed * OUTER_SPEED_MULTIPLIER;
		redraw();
	}

	function startDeceleration() {
		if (speed !== 0) {
			decelerating = true;
			requestAnimationFrame(decelerate);
		}
	}

	function decelerate() {
		if (!decelerating) return;
		innerAngle -= speed;
		outerAngle -= speed * OUTER_SPEED_MULTIPLIER;
		redraw();
		speed *= DECELERATION_RATE;
		if (Math.abs(speed) < MIN_SPEED_THRESHOLD) {
			decelerating = false;
			speed = 0;
		} else {
			requestAnimationFrame(decelerate);
		}
	}

	function onMouseUp() {
		if (speed !== 0) {
			decelerating = true;
			requestAnimationFrame(decelerate);
		}
	}

	function onTouchEnd() {
		if (speed !== 0) {
			decelerating = true;
			requestAnimationFrame(decelerate);
		}
	}

	function redraw() {
		innerCircle.forEach((element: HTMLElement, index) => {
			const { x, y, scale } = calculatePosition(
				innerCircle.length,
				index + innerAngle,
				INNER_OFFSET,
			);
			element.style.left = `${x}%`;
			element.style.top = `${y}%`;
			element.style.transform = `scale(${scale}) translate(-50%, -50%)`;
		});
		outerCircle.forEach((element: HTMLElement, index) => {
			const { x, y, scale } = calculatePosition(
				outerCircle.length,
				index + outerAngle,
				OUTER_OFFSET,
			);
			element.style.left = `${x}%`;
			element.style.top = `${y}%`;
			element.style.transform = `scale(${scale}) translate(-50%, -50%)`;
		});
	}

	function update() {
		if (!shouldUpdate) return;
		innerAngle += INNER_CIRCLE_ROTATION_SPEED;
		outerAngle += OUTER_CIRCLE_ROTATION_SPEED;
		redraw();
		requestAnimationFrame(update);
	}

	function setupEventListeners() {
		function handleDragStart(e: MouseEvent | TouchEvent) {
			shouldUpdate = false;
			if (e.type === "mousedown") {
				document.addEventListener("mousemove", onMouseMove);
			} else if (e.type === "touchstart") {
				document.addEventListener("touchmove", onTouchMove);
			}
		}

		function handleDragEnd() {
			document.removeEventListener("mousemove", onMouseMove);
			document.removeEventListener("touchmove", onTouchMove);
			prevX = 0;
			if (!shouldUpdate) {
				shouldUpdate = true;
				update();
			}
		}

		function setupContainerListeners(container: Element) {
			container.addEventListener("touchstart", handleDragStart);
			container.addEventListener("mousedown", handleDragStart);
		}

		document.addEventListener("mouseup", startDeceleration);
		document.addEventListener("touchend", startDeceleration);
		document.addEventListener("mouseup", handleDragEnd);
		document.addEventListener("touchend", handleDragEnd);

		return {
			setupContainerListeners,
		};
	}

	// Setup event listeners
	const { setupContainerListeners } = setupEventListeners();
	setupContainerListeners(innerContainer);
	setupContainerListeners(outerContainer);

	// Start the event loop
	update();
</script>

<style>
	.header-container {
		display: flex;
		justify-content: center;
		width: 100%;
		overflow: hidden;
		padding-left: var(--site-spacing);
		padding-right: var(--site-spacing);
		box-sizing: border-box;
		/* For the carousel */
		padding-bottom: 450px;
	}

	.get-involved-container {
		position: relative;
		display: inline-block;
		max-width: var(--max-width_s);
		overflow: visible;
		height: fit-content;
	}

	.get-involved-contents {
		display: inline-block;
		z-index: 1;
		position: relative;
	}

	.inner-involved-container {
		bottom: 0px;
		left: 50%;
		position: absolute;
		aspect-ratio: 1;
		width: 300vw;
		max-width: 960px;
		transform: translateY(20%) translateX(-50%);
	}
	.outer-involved-container {
		--offset: 100px;
		bottom: calc(0px - var(--offset));
		left: 50%;
		position: absolute;
		aspect-ratio: 1;
		width: calc(300vw + calc(var(--offset) * 3.14));
		max-width: calc(960px + calc(var(--offset) * 3.14));
		transform: translateY(20%) translateX(-50%);
	}

	.outer-involved-container,
	.inner-involved-container {
		user-select: none;
		cursor: ew-resize;
	}

	.circle-item {
		position: absolute;
		width: 80px;
		height: 80px;
		border-radius: 50%;
		background-size: cover;
		transition:
			opacity 0.75s,
			transform 0.2s;
		transform-origin: top left;
	}

	.sticker-role {
		position: absolute;
		width: 32px;
		height: 32px;
		bottom: -4px;
		right: -4px;
		filter: var(--shadow_sticker_drop_shadow);
	}

	hr {
		position: relative;
		overflow: clip;
		border: none;
		margin-top: var(--site-spacing);
		margin-bottom: var(--site-spacing);

		color: var(--primary_variant);
		height: 20px;

		mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='20' height='20' viewBox='0 0 8 8' fill='none'%3E%3Cpath stroke='%23000' stroke-width='1.6' stroke-linecap='round' d='M -4 4 C -3 5 -1 5 0 4 C 1 3 3 3 4 4 C 5 5 7 5 8 4 C 9 3 11 3 12 4'%3E%3C/path%3E%3C/svg%3E");
		mask-repeat: repeat-x;
	}

	hr {
		color: #87ceff;
		transform: scale(2);
		width: 50%;
		background: linear-gradient(
			to right,
			transparent,
			currentColor 32px,
			currentColor calc(100% - 32px),
			transparent
		) !important;
		margin-top: 8px;
		margin-bottom: 20px;
	}

	h1 {
		color: var(--primary_default);
		text-shadow: 0px -8px 0px #fff;
		font-family: Figtree;
		font-size: 96px;
		font-style: normal;
		font-weight: 900;
		line-height: 100%; /* 96px */
	}

	h1 {
		margin: 0;
		margin-top: var(--spc-8x);
	}

	.paragraph-container {
		display: flex;
	}

	p {
		color: var(--foreground_emphasis-high);
		text-align: center;
	}

	p {
		margin: 0;
		display: inline-block;
		width: 1px;
		flex-grow: 1;
		text-align: center;
	}
</style>
