---
import ProfileSection from "./components/profile-section.astro";
import { SubHeader } from "../../components/subheader/subheader";
import { PostCardGrid } from "components/post-card/post-card-grid";
import { ExtendedPostInfo } from "types/index";
import { UnicornInfo } from "types/UnicornInfo";
import { getUnicornProfilePicMap } from "utils/get-unicorn-profile-pic-map";
import { Button } from "../../components";
import styles from "./unicorn-page.module.scss";
import AchievementCard from "./components/achievement-card.astro";
import { buildSearchQuery } from "../../utils/search";
import { getAchievements, Achievement } from "src/utils/achievements";
import { translate } from "utils/translations";

interface UnicornPageProps {
	unicorn: UnicornInfo;
	posts: ExtendedPostInfo[];
}

const { unicorn, posts } = Astro.props as UnicornPageProps;
const unicornProfilePicMap = await getUnicornProfilePicMap();

const achievementsMeta: Achievement[] = [];
for await (const achievement of getAchievements(unicorn))
	achievementsMeta.push(achievement);

const postsToDisplay = posts.slice(0, 4);
const numberOfAchievementsToShowAtStart = posts.length ? 3 : 6;
const showAchievementToggle =
	achievementsMeta.length > numberOfAchievementsToShowAtStart;
const showPostsToggle = posts.length > postsToDisplay.length;
---

<div class={styles.container}>
	<ProfileSection
		unicorn={unicorn}
		unicornProfilePicMap={unicornProfilePicMap}
	/>
	<section class={styles.contentContainer}>
		<!-- TODO: Translate -->
		<SubHeader tag="h2" text="Achievements" id="achievements">
			{
				showAchievementToggle && (
					<Button
						id="view-all-achievements"
						tag="button"
						type="button"
						aria-labelledby="achievements"
					>
						{translate(Astro, "action.view_all")}
					</Button>
				)
			}
		</SubHeader>
		<ul
			class={styles.achievementsContainer}
			role="list"
			aria-labelledby="achievements"
		>
			{
				achievementsMeta.map((ach, i) => {
					const shouldShow = i < numberOfAchievementsToShowAtStart;
					return (
						<li
							data-hide-initially={!shouldShow}
							style={shouldShow ? "" : "display: none;"}
						>
							<AchievementCard achievement={ach} />
						</li>
					);
				})
			}
		</ul>
		{
			postsToDisplay.length
				? [
						<SubHeader
							tag="h2"
							text="Recent articles"
							id="recent-articles-header"
						>
							{showPostsToggle && (
								<Button
									tag="a"
									href={`/search?${buildSearchQuery({
										filterAuthors: [unicorn.id],
									})}`}
									aria-labelledby="recent-articles-header"
								>
									{translate(Astro, "action.view_all")}
								</Button>
							)}
						</SubHeader>,
						<PostCardGrid
							aria-labelledby={"recent-articles-header"}
							postsToDisplay={postsToDisplay}
							postHeadingTag="h3"
							unicornProfilePicMap={unicornProfilePicMap}
						/>,
				  ]
				: undefined
		}
	</section>
</div>

<script>
	const viewAllAchievementsButton: HTMLElement = document.querySelector(
		"#view-all-achievements",
	);
	const viewAllAchievementsText: HTMLElement =
		viewAllAchievementsButton.querySelector(".innerText");

	if (viewAllAchievementsButton) {
		const hiddenAchievements: HTMLElement[] = Array.from(
			document.querySelectorAll("[data-hide-initially]"),
		);

		let expanded = false;

		viewAllAchievementsButton.addEventListener("click", () => {
			expanded = !expanded;
			if (expanded) {
				hiddenAchievements.forEach((achievement) => {
					achievement.style.display = "";
				});
				viewAllAchievementsText.innerText = "View less";
				return;
			}

			hiddenAchievements.forEach((achievement) => {
				achievement.style.display = "none";
			});
			viewAllAchievementsText.innerText = "View all";
		});
	}
</script>
